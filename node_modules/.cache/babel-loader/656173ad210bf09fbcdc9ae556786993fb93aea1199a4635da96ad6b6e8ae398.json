{"ast":null,"code":"export let EngineTypes = /*#__PURE__*/function (EngineTypes) {\n  EngineTypes[\"diesel\"] = \"Diesel\";\n  EngineTypes[\"petrol\"] = \"Petrol\";\n  EngineTypes[\"electric\"] = \"Electric\";\n  EngineTypes[\"hybric\"] = \"Hyrbrid\";\n  return EngineTypes;\n}({});\nexport let CarColor = /*#__PURE__*/function (CarColor) {\n  CarColor[\"red\"] = \"Red\";\n  return CarColor;\n}({});\nexport class AbstractEngine {\n  constructor() {\n    this.displacement = void 0;\n    this.engineType = void 0;\n  } // public abstract revEngine(): void;\n}\nexport class DieselEngine extends AbstractEngine {\n  constructor(displacement) {\n    super();\n    this.displacement = displacement;\n    this.engineType = EngineTypes.diesel;\n  }\n\n  // public revEngine(): void {\n  //     console.log('GULP');\n  // }\n\n  // export class PetrolEngine extends AbstractEngine {\n  //     public fuelType: FuelType = FuelType.PETROL;\n  //     public constructor(public displacement: number) {\n  //         super();\n  //     }\n  //     public revEngine(): void {\n  //         console.log('Vroom');\n  //     }\n  // }\n\n  // export class HybridEngine extends AbstractEngine {\n  //     public fuelType: FuelType = FuelType.HYBRID;\n  //     public constructor(public displacement: number) {\n  //         super();\n  //     }\n\n  // public revEngine(): void {\n  //     console.log('Zoof');\n  // }\n  // }\n\n  // export class ElectricEngine extends AbstractEngine {\n  //     public fuelType: FuelType = FuelType.HYBRID;\n  //     public constructor(public displacement: number) {\n  //         super();\n  //     }\n\n  // public revEngine(): void {\n  //     console.log('...');\n  // }\n}\n\nexport class AbstractDoor {\n  constructor() {\n    this.color = void 0;\n  }\n}\nexport class FamilyCarDoor extends AbstractDoor {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  setColor(color) {\n    this.color = color;\n  }\n}\nexport class AbstractWindow {}\nexport class AbstractCar {}\nexport class FamilyCar extends AbstractCar {\n  constructor() {\n    super(...arguments);\n    this.engine = null;\n    this.doors = [];\n  }\n  setEngine(engine) {\n    this.engine = engine;\n  }\n  getEngine() {\n    return this.engine;\n  }\n  changeEngine(engine) {\n    this.engine = engine;\n  }\n}\n// export const instance = new FamilyCar(new DieselEngine(2000), [new FamilyCarDoor(\"red\"), new FamilyCarDoor(\"red\"), new FamilyCarDoor(\"red\") ,new FamilyCarDoor(\"red\"), new FamilyCarDoor(\"red\")]);\n// instance.getEngine().revEngine();\n\n// instance.changeEngine(new HybridEngine(2000));\n// instance.getEngine().revEngine();\n\n// [Selecteer auto type] -> [Motor type] -> [Deur type]","map":{"version":3,"names":["EngineTypes","CarColor","AbstractEngine","constructor","displacement","engineType","DieselEngine","diesel","AbstractDoor","color","FamilyCarDoor","setColor","AbstractWindow","AbstractCar","FamilyCar","arguments","engine","doors","setEngine","getEngine","changeEngine"],"sources":["/Users/deniz/Desktop/Oefen projecten TS/autoconfigurator/car-configurator/src/models/index.ts"],"sourcesContent":["export enum EngineTypes {\n    diesel = \"Diesel\",\n    petrol = \"Petrol\",\n    electric = \"Electric\",\n    hybric =\"Hyrbrid\",\n}\nexport enum CarColor {\n    red = \"Red\",\n}\nexport abstract class AbstractEngine {\n    public abstract displacement: number;\n    public abstract engineType: EngineTypes;\n    // public abstract revEngine(): void;\n}\n\nexport class DieselEngine extends AbstractEngine {\n    public engineType: EngineTypes = EngineTypes.diesel; \n    public constructor(public displacement: number) {\n        super();\n    }\n\n    // public revEngine(): void {\n    //     console.log('GULP');\n    // }\n\n\n// export class PetrolEngine extends AbstractEngine {\n//     public fuelType: FuelType = FuelType.PETROL;\n//     public constructor(public displacement: number) {\n//         super();\n//     }\n//     public revEngine(): void {\n//         console.log('Vroom');\n//     }\n// }\n\n// export class HybridEngine extends AbstractEngine {\n//     public fuelType: FuelType = FuelType.HYBRID;\n//     public constructor(public displacement: number) {\n//         super();\n//     }\n\n    // public revEngine(): void {\n    //     console.log('Zoof');\n    // }\n// }\n\n// export class ElectricEngine extends AbstractEngine {\n//     public fuelType: FuelType = FuelType.HYBRID;\n//     public constructor(public displacement: number) {\n//         super();\n//     }\n\n    // public revEngine(): void {\n    //     console.log('...');\n    // }\n}\n\nexport abstract class AbstractDoor {\n    public abstract color: string;\n}\n\nexport class FamilyCarDoor extends AbstractDoor {\n    public constructor(public color: string){\n        super();\n    }\n\n    public setColor(color: string) {\n        this.color = color;\n    }\n}\n\nexport abstract class AbstractWindow {}\n\n\nexport abstract class AbstractCar {\n    public abstract getEngine(): AbstractEngine|null;\n    public abstract setEngine(engine: AbstractEngine): void;\n    public abstract changeEngine(engine: AbstractEngine): void;\n}\n\n\nexport class FamilyCar extends AbstractCar {\n    private engine: AbstractEngine|null = null;\n    private doors: FamilyCarDoor[] = [];\n\n    public setEngine(engine: AbstractEngine): void {\n        this.engine = engine;\n    }\n    public getEngine(): AbstractEngine|null {\n        return this.engine;\n    }\n    public changeEngine(engine: AbstractEngine): void {\n        this.engine = engine;\n    }\n}\n// export const instance = new FamilyCar(new DieselEngine(2000), [new FamilyCarDoor(\"red\"), new FamilyCarDoor(\"red\"), new FamilyCarDoor(\"red\") ,new FamilyCarDoor(\"red\"), new FamilyCarDoor(\"red\")]);\n// instance.getEngine().revEngine();\n\n// instance.changeEngine(new HybridEngine(2000));\n// instance.getEngine().revEngine();\n\n// [Selecteer auto type] -> [Motor type] -> [Deur type]\n"],"mappings":"AAAA,WAAYA,WAAW,0BAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAA,OAAXA,WAAW;AAAA;AAMvB,WAAYC,QAAQ,0BAARA,QAAQ;EAARA,QAAQ;EAAA,OAARA,QAAQ;AAAA;AAGpB,OAAO,MAAeC,cAAc,CAAC;EAAAC,YAAA;IAAA,KACjBC,YAAY;IAAA,KACZC,UAAU;EAAA,EAC1B;AACJ;AAEA,OAAO,MAAMC,YAAY,SAASJ,cAAc,CAAC;EAEtCC,WAAWA,CAAQC,YAAoB,EAAE;IAC5C,KAAK,CAAC,CAAC;IAAC,KADcA,YAAoB,GAApBA,YAAoB;IAAA,KADvCC,UAAU,GAAgBL,WAAW,CAACO,MAAM;EAGnD;;EAEA;EACA;EACA;;EAGJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEI;EACA;EACA;EACJ;;EAEA;EACA;EACA;EACA;EACA;;EAEI;EACA;EACA;AACJ;;AAEA,OAAO,MAAeC,YAAY,CAAC;EAAAL,YAAA;IAAA,KACfM,KAAK;EAAA;AACzB;AAEA,OAAO,MAAMC,aAAa,SAASF,YAAY,CAAC;EACrCL,WAAWA,CAAQM,KAAa,EAAC;IACpC,KAAK,CAAC,CAAC;IAAC,KADcA,KAAa,GAAbA,KAAa;EAEvC;EAEOE,QAAQA,CAACF,KAAa,EAAE;IAC3B,IAAI,CAACA,KAAK,GAAGA,KAAK;EACtB;AACJ;AAEA,OAAO,MAAeG,cAAc,CAAC;AAGrC,OAAO,MAAeC,WAAW,CAAC;AAOlC,OAAO,MAAMC,SAAS,SAASD,WAAW,CAAC;EAAAV,YAAA;IAAA,SAAAY,SAAA;IAAA,KAC/BC,MAAM,GAAwB,IAAI;IAAA,KAClCC,KAAK,GAAoB,EAAE;EAAA;EAE5BC,SAASA,CAACF,MAAsB,EAAQ;IAC3C,IAAI,CAACA,MAAM,GAAGA,MAAM;EACxB;EACOG,SAASA,CAAA,EAAwB;IACpC,OAAO,IAAI,CAACH,MAAM;EACtB;EACOI,YAAYA,CAACJ,MAAsB,EAAQ;IAC9C,IAAI,CAACA,MAAM,GAAGA,MAAM;EACxB;AACJ;AACA;AACA;;AAEA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}