{"ast":null,"code":"export let EngineTypes = /*#__PURE__*/function (EngineTypes) {\n  EngineTypes[\"diesel\"] = \"Diesel\";\n  EngineTypes[\"petrol\"] = \"Petrol\";\n  EngineTypes[\"electric\"] = \"Electric\";\n  EngineTypes[\"hybric\"] = \"Hyrbrid\";\n  return EngineTypes;\n}({});\nexport let CarColor = /*#__PURE__*/function (CarColor) {\n  CarColor[\"Red\"] = \"red\";\n  CarColor[\"Blue\"] = \"blue\";\n  CarColor[\"Green\"] = \"green\";\n  return CarColor;\n}({});\nconst colorMap = {\n  [CarColor.Red]: {\n    name: \"Red\",\n    hex: \"#FE5F55\"\n  },\n  [CarColor.Blue]: {\n    name: \"Blue\",\n    hex: \"#6495ED\"\n  },\n  [CarColor.Green]: {\n    name: \"Green\",\n    hex: \"#00FF00\"\n  }\n};\nexport class AbstractEngine {\n  constructor() {\n    this.displacement = void 0;\n    this.engineType = void 0;\n    this.carColor = void 0;\n  }\n}\n// public abstract revEngine(): void;\n\n// export class DieselEngine extends AbstractEngine {\n//     public engineType: EngineTypes = EngineTypes.diesel; \n//     public constructor(public displacement: number) {\n//         super();\n//     }\n\n// public revEngine(): void {\n//     console.log('GULP');\n// }\n\n// export class PetrolEngine extends AbstractEngine {\n//     public fuelType: FuelType = FuelType.PETROL;\n//     public constructor(public displacement: number) {\n//         super();\n//     }\n//     public revEngine(): void {\n//         console.log('Vroom');\n//     }\n// }\n\n// export class HybridEngine extends AbstractEngine {\n//     public fuelType: FuelType = FuelType.HYBRID;\n//     public constructor(public displacement: number) {\n//         super();\n//     }\n\n// public revEngine(): void {\n//     console.log('Zoof');\n// }\n// }\n\n// export class ElectricEngine extends AbstractEngine {\n//     public fuelType: FuelType = FuelType.HYBRID;\n//     public constructor(public displacement: number) {\n//         super();\n//     }\n\n// public revEngine(): void {\n//     console.log('...');\n// }\n\nexport class AbstractDoor {\n  constructor() {\n    this.color = void 0;\n  }\n}\nexport class FamilyCarDoor extends AbstractDoor {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  setColor(color) {\n    this.color = color;\n  }\n}\nexport class AbstractWindow {}\nexport class AbstractCar {}\nexport class FamilyCar extends AbstractCar {\n  constructor() {\n    super(...arguments);\n    this.engine = null;\n    this.doors = [];\n  }\n  setEngine(engine) {\n    this.engine = engine;\n  }\n  getEngine() {\n    return this.engine;\n  }\n  changeEngine(engine) {\n    this.engine = engine;\n  }\n}\n// export const instance = new FamilyCar(new DieselEngine(2000), [new FamilyCarDoor(\"red\"), new FamilyCarDoor(\"red\"), new FamilyCarDoor(\"red\") ,new FamilyCarDoor(\"red\"), new FamilyCarDoor(\"red\")]);\n// instance.getEngine().revEngine();\n\n// instance.changeEngine(new HybridEngine(2000));\n// instance.getEngine().revEngine();\n\n// [Selecteer auto type] -> [Motor type] -> [Deur type]","map":{"version":3,"names":["EngineTypes","CarColor","colorMap","Red","name","hex","Blue","Green","AbstractEngine","constructor","displacement","engineType","carColor","AbstractDoor","color","FamilyCarDoor","setColor","AbstractWindow","AbstractCar","FamilyCar","arguments","engine","doors","setEngine","getEngine","changeEngine"],"sources":["/Users/deniz/Desktop/Oefen projecten TS/autoconfigurator/car-configurator/src/models/index.ts"],"sourcesContent":["export enum EngineTypes {\n    diesel = \"Diesel\",\n    petrol = \"Petrol\",\n    electric = \"Electric\",\n    hybric =\"Hyrbrid\",\n}\nexport interface ColorInfo {\n    name: string;\n    hex: string;\n  }\n  \n  export enum CarColor {\n    Red = \"red\",\n    Blue = \"blue\",\n    Green = \"green\",\n  }\n  \n  const colorMap: Record<CarColor, ColorInfo> = {\n    [CarColor.Red]: { name: \"Red\", hex: \"#FE5F55\" },\n    [CarColor.Blue]: { name: \"Blue\", hex: \"#6495ED\" },\n    [CarColor.Green]: { name: \"Green\", hex: \"#00FF00\" },\n  };\n  \n  \nexport abstract class AbstractEngine {\n    public abstract displacement: number;\n    public abstract engineType: EngineTypes;\n    public abstract carColor: CarColor;\n}\n    // public abstract revEngine(): void;\n\n\n\n// export class DieselEngine extends AbstractEngine {\n//     public engineType: EngineTypes = EngineTypes.diesel; \n//     public constructor(public displacement: number) {\n//         super();\n//     }\n\n    // public revEngine(): void {\n    //     console.log('GULP');\n    // }\n\n\n// export class PetrolEngine extends AbstractEngine {\n//     public fuelType: FuelType = FuelType.PETROL;\n//     public constructor(public displacement: number) {\n//         super();\n//     }\n//     public revEngine(): void {\n//         console.log('Vroom');\n//     }\n// }\n\n// export class HybridEngine extends AbstractEngine {\n//     public fuelType: FuelType = FuelType.HYBRID;\n//     public constructor(public displacement: number) {\n//         super();\n//     }\n\n    // public revEngine(): void {\n    //     console.log('Zoof');\n    // }\n// }\n\n// export class ElectricEngine extends AbstractEngine {\n//     public fuelType: FuelType = FuelType.HYBRID;\n//     public constructor(public displacement: number) {\n//         super();\n//     }\n\n    // public revEngine(): void {\n    //     console.log('...');\n    // }\n\nexport abstract class AbstractDoor {\n    public abstract color: string;\n}\n\nexport class FamilyCarDoor extends AbstractDoor {\n    public constructor(public color: string){\n        super();\n    }\n\n    public setColor(color: string) {\n        this.color = color;\n    }\n}\n\nexport abstract class AbstractWindow {}\n\n\nexport abstract class AbstractCar {\n    public abstract getEngine(): AbstractEngine|null;\n    public abstract setEngine(engine: AbstractEngine): void;\n    public abstract changeEngine(engine: AbstractEngine): void;\n}\n\n\nexport class FamilyCar extends AbstractCar {\n    private engine: AbstractEngine|null = null;\n    private doors: FamilyCarDoor[] = [];\n\n    public setEngine(engine: AbstractEngine): void {\n        this.engine = engine;\n    }\n    public getEngine(): AbstractEngine|null {\n        return this.engine;\n    }\n    public changeEngine(engine: AbstractEngine): void {\n        this.engine = engine;\n    }\n}\n// export const instance = new FamilyCar(new DieselEngine(2000), [new FamilyCarDoor(\"red\"), new FamilyCarDoor(\"red\"), new FamilyCarDoor(\"red\") ,new FamilyCarDoor(\"red\"), new FamilyCarDoor(\"red\")]);\n// instance.getEngine().revEngine();\n\n// instance.changeEngine(new HybridEngine(2000));\n// instance.getEngine().revEngine();\n\n// [Selecteer auto type] -> [Motor type] -> [Deur type]\n"],"mappings":"AAAA,WAAYA,WAAW,0BAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAXA,WAAW;EAAA,OAAXA,WAAW;AAAA;AAWrB,WAAYC,QAAQ,0BAARA,QAAQ;EAARA,QAAQ;EAARA,QAAQ;EAARA,QAAQ;EAAA,OAARA,QAAQ;AAAA;AAMpB,MAAMC,QAAqC,GAAG;EAC5C,CAACD,QAAQ,CAACE,GAAG,GAAG;IAAEC,IAAI,EAAE,KAAK;IAAEC,GAAG,EAAE;EAAU,CAAC;EAC/C,CAACJ,QAAQ,CAACK,IAAI,GAAG;IAAEF,IAAI,EAAE,MAAM;IAAEC,GAAG,EAAE;EAAU,CAAC;EACjD,CAACJ,QAAQ,CAACM,KAAK,GAAG;IAAEH,IAAI,EAAE,OAAO;IAAEC,GAAG,EAAE;EAAU;AACpD,CAAC;AAGH,OAAO,MAAeG,cAAc,CAAC;EAAAC,YAAA;IAAA,KACjBC,YAAY;IAAA,KACZC,UAAU;IAAA,KACVC,QAAQ;EAAA;AAC5B;AACI;;AAIJ;AACA;AACA;AACA;AACA;;AAEI;AACA;AACA;;AAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEI;AACA;AACA;AACJ;;AAEA;AACA;AACA;AACA;AACA;;AAEI;AACA;AACA;;AAEJ,OAAO,MAAeC,YAAY,CAAC;EAAAJ,YAAA;IAAA,KACfK,KAAK;EAAA;AACzB;AAEA,OAAO,MAAMC,aAAa,SAASF,YAAY,CAAC;EACrCJ,WAAWA,CAAQK,KAAa,EAAC;IACpC,KAAK,CAAC,CAAC;IAAC,KADcA,KAAa,GAAbA,KAAa;EAEvC;EAEOE,QAAQA,CAACF,KAAa,EAAE;IAC3B,IAAI,CAACA,KAAK,GAAGA,KAAK;EACtB;AACJ;AAEA,OAAO,MAAeG,cAAc,CAAC;AAGrC,OAAO,MAAeC,WAAW,CAAC;AAOlC,OAAO,MAAMC,SAAS,SAASD,WAAW,CAAC;EAAAT,YAAA;IAAA,SAAAW,SAAA;IAAA,KAC/BC,MAAM,GAAwB,IAAI;IAAA,KAClCC,KAAK,GAAoB,EAAE;EAAA;EAE5BC,SAASA,CAACF,MAAsB,EAAQ;IAC3C,IAAI,CAACA,MAAM,GAAGA,MAAM;EACxB;EACOG,SAASA,CAAA,EAAwB;IACpC,OAAO,IAAI,CAACH,MAAM;EACtB;EACOI,YAAYA,CAACJ,MAAsB,EAAQ;IAC9C,IAAI,CAACA,MAAM,GAAGA,MAAM;EACxB;AACJ;AACA;AACA;;AAEA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}