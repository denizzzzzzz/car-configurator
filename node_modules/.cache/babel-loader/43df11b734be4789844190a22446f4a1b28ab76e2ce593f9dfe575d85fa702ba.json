{"ast":null,"code":"export let FuelType = /*#__PURE__*/function (FuelType) {\n  FuelType[FuelType[\"DIESEL\"] = 0] = \"DIESEL\";\n  FuelType[FuelType[\"PETROL\"] = 1] = \"PETROL\";\n  FuelType[FuelType[\"ELECTRIC\"] = 2] = \"ELECTRIC\";\n  FuelType[FuelType[\"HYBRID\"] = 3] = \"HYBRID\";\n  return FuelType;\n}({});\nexport class AbstractEngine {\n  constructor() {\n    this.displacement = void 0;\n    this.fuelType = void 0;\n  } // public abstract revEngine(): void;\n}\nexport class DieselEngine extends AbstractEngine {\n  constructor(displacement) {\n    super();\n    this.displacement = displacement;\n    this.fuelType = FuelType.DIESEL;\n  }\n\n  // public revEngine(): void {\n  //     console.log('GULP');\n  // }\n}\n\nexport class PetrolEngine extends AbstractEngine {\n  constructor(displacement) {\n    super();\n    this.displacement = displacement;\n    this.fuelType = FuelType.PETROL;\n  }\n  revEngine() {\n    console.log('Vroom');\n  }\n}\nexport class HybridEngine extends AbstractEngine {\n  constructor(displacement) {\n    super();\n    this.displacement = displacement;\n    this.fuelType = FuelType.HYBRID;\n  }\n\n  // public revEngine(): void {\n  //     console.log('Zoof');\n  // }\n}\n\nexport class ElectricEngine extends AbstractEngine {\n  constructor(displacement) {\n    super();\n    this.displacement = displacement;\n    this.fuelType = FuelType.HYBRID;\n  }\n\n  // public revEngine(): void {\n  //     console.log('...');\n  // }\n}\n\nexport class AbstractDoor {\n  constructor() {\n    this.color = void 0;\n  }\n}\nexport class FamilyCarDoor extends AbstractDoor {\n  constructor(color) {\n    super();\n    this.color = color;\n  }\n  setColor(color) {\n    this.color = color;\n  }\n}\nexport class AbstractWindow {}\nexport class AbstractCar {}\nexport class FamilyCar extends AbstractCar {\n  constructor() {\n    super(...arguments);\n    this.engine = null;\n    this.doors = [];\n  }\n  setEngine(engine) {\n    this.engine = engine;\n  }\n  getEngine() {\n    return this.engine;\n  }\n  changeEngine(engine) {\n    this.engine = engine;\n  }\n}\n// export const instance = new FamilyCar(new DieselEngine(2000), [new FamilyCarDoor(\"red\"), new FamilyCarDoor(\"red\"), new FamilyCarDoor(\"red\") ,new FamilyCarDoor(\"red\"), new FamilyCarDoor(\"red\")]);\n// instance.getEngine().revEngine();\n\n// instance.changeEngine(new HybridEngine(2000));\n// instance.getEngine().revEngine();\n\n// [Selecteer auto type] -> [Motor type] -> [Deur type]","map":{"version":3,"names":["FuelType","AbstractEngine","constructor","displacement","fuelType","DieselEngine","DIESEL","PetrolEngine","PETROL","revEngine","console","log","HybridEngine","HYBRID","ElectricEngine","AbstractDoor","color","FamilyCarDoor","setColor","AbstractWindow","AbstractCar","FamilyCar","arguments","engine","doors","setEngine","getEngine","changeEngine"],"sources":["/Users/deniz/Desktop/Oefen projecten TS/autoconfigurator/car-configurator/src/models/index.ts"],"sourcesContent":["export enum FuelType {\n    \"DIESEL\",\n    \"PETROL\",\n    \"ELECTRIC\",\n    \"HYBRID\",\n}\nexport abstract class AbstractEngine {\n    public abstract displacement: number;\n    public abstract fuelType: FuelType;\n    // public abstract revEngine(): void;\n}\n\nexport class DieselEngine extends AbstractEngine {\n    public fuelType: FuelType = FuelType.DIESEL; \n    public constructor(public displacement: number) {\n        super();\n    }\n\n    // public revEngine(): void {\n    //     console.log('GULP');\n    // }\n}\n\nexport class PetrolEngine extends AbstractEngine {\n    public fuelType: FuelType = FuelType.PETROL;\n    public constructor(public displacement: number) {\n        super();\n    }\n    public revEngine(): void {\n        console.log('Vroom');\n    }\n}\n\nexport class HybridEngine extends AbstractEngine {\n    public fuelType: FuelType = FuelType.HYBRID;\n    public constructor(public displacement: number) {\n        super();\n    }\n\n    // public revEngine(): void {\n    //     console.log('Zoof');\n    // }\n}\n\nexport class ElectricEngine extends AbstractEngine {\n    public fuelType: FuelType = FuelType.HYBRID;\n    public constructor(public displacement: number) {\n        super();\n    }\n\n    // public revEngine(): void {\n    //     console.log('...');\n    // }\n}\n\nexport abstract class AbstractDoor {\n    public abstract color: string;\n}\n\nexport class FamilyCarDoor extends AbstractDoor {\n    public constructor(public color: string){\n        super();\n    }\n\n    public setColor(color: string) {\n        this.color = color;\n    }\n}\n\nexport abstract class AbstractWindow {}\n\n\nexport abstract class AbstractCar {\n    public abstract getEngine(): AbstractEngine|null;\n    public abstract setEngine(engine: AbstractEngine): void;\n    public abstract changeEngine(engine: AbstractEngine): void;\n}\n\n\nexport class FamilyCar extends AbstractCar {\n    private engine: AbstractEngine|null = null;\n    private doors: FamilyCarDoor[] = [];\n\n    public setEngine(engine: AbstractEngine): void {\n        this.engine = engine;\n    }\n    public getEngine(): AbstractEngine|null {\n        return this.engine;\n    }\n    public changeEngine(engine: AbstractEngine): void {\n        this.engine = engine;\n    }\n}\n// export const instance = new FamilyCar(new DieselEngine(2000), [new FamilyCarDoor(\"red\"), new FamilyCarDoor(\"red\"), new FamilyCarDoor(\"red\") ,new FamilyCarDoor(\"red\"), new FamilyCarDoor(\"red\")]);\n// instance.getEngine().revEngine();\n\n// instance.changeEngine(new HybridEngine(2000));\n// instance.getEngine().revEngine();\n\n// [Selecteer auto type] -> [Motor type] -> [Deur type]\n"],"mappings":"AAAA,WAAYA,QAAQ,0BAARA,QAAQ;EAARA,QAAQ,CAARA,QAAQ;EAARA,QAAQ,CAARA,QAAQ;EAARA,QAAQ,CAARA,QAAQ;EAARA,QAAQ,CAARA,QAAQ;EAAA,OAARA,QAAQ;AAAA;AAMpB,OAAO,MAAeC,cAAc,CAAC;EAAAC,YAAA;IAAA,KACjBC,YAAY;IAAA,KACZC,QAAQ;EAAA,EACxB;AACJ;AAEA,OAAO,MAAMC,YAAY,SAASJ,cAAc,CAAC;EAEtCC,WAAWA,CAAQC,YAAoB,EAAE;IAC5C,KAAK,CAAC,CAAC;IAAC,KADcA,YAAoB,GAApBA,YAAoB;IAAA,KADvCC,QAAQ,GAAaJ,QAAQ,CAACM,MAAM;EAG3C;;EAEA;EACA;EACA;AACJ;;AAEA,OAAO,MAAMC,YAAY,SAASN,cAAc,CAAC;EAEtCC,WAAWA,CAAQC,YAAoB,EAAE;IAC5C,KAAK,CAAC,CAAC;IAAC,KADcA,YAAoB,GAApBA,YAAoB;IAAA,KADvCC,QAAQ,GAAaJ,QAAQ,CAACQ,MAAM;EAG3C;EACOC,SAASA,CAAA,EAAS;IACrBC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;EACxB;AACJ;AAEA,OAAO,MAAMC,YAAY,SAASX,cAAc,CAAC;EAEtCC,WAAWA,CAAQC,YAAoB,EAAE;IAC5C,KAAK,CAAC,CAAC;IAAC,KADcA,YAAoB,GAApBA,YAAoB;IAAA,KADvCC,QAAQ,GAAaJ,QAAQ,CAACa,MAAM;EAG3C;;EAEA;EACA;EACA;AACJ;;AAEA,OAAO,MAAMC,cAAc,SAASb,cAAc,CAAC;EAExCC,WAAWA,CAAQC,YAAoB,EAAE;IAC5C,KAAK,CAAC,CAAC;IAAC,KADcA,YAAoB,GAApBA,YAAoB;IAAA,KADvCC,QAAQ,GAAaJ,QAAQ,CAACa,MAAM;EAG3C;;EAEA;EACA;EACA;AACJ;;AAEA,OAAO,MAAeE,YAAY,CAAC;EAAAb,YAAA;IAAA,KACfc,KAAK;EAAA;AACzB;AAEA,OAAO,MAAMC,aAAa,SAASF,YAAY,CAAC;EACrCb,WAAWA,CAAQc,KAAa,EAAC;IACpC,KAAK,CAAC,CAAC;IAAC,KADcA,KAAa,GAAbA,KAAa;EAEvC;EAEOE,QAAQA,CAACF,KAAa,EAAE;IAC3B,IAAI,CAACA,KAAK,GAAGA,KAAK;EACtB;AACJ;AAEA,OAAO,MAAeG,cAAc,CAAC;AAGrC,OAAO,MAAeC,WAAW,CAAC;AAOlC,OAAO,MAAMC,SAAS,SAASD,WAAW,CAAC;EAAAlB,YAAA;IAAA,SAAAoB,SAAA;IAAA,KAC/BC,MAAM,GAAwB,IAAI;IAAA,KAClCC,KAAK,GAAoB,EAAE;EAAA;EAE5BC,SAASA,CAACF,MAAsB,EAAQ;IAC3C,IAAI,CAACA,MAAM,GAAGA,MAAM;EACxB;EACOG,SAASA,CAAA,EAAwB;IACpC,OAAO,IAAI,CAACH,MAAM;EACtB;EACOI,YAAYA,CAACJ,MAAsB,EAAQ;IAC9C,IAAI,CAACA,MAAM,GAAGA,MAAM;EACxB;AACJ;AACA;AACA;;AAEA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}